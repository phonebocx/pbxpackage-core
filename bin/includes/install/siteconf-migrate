#!/bin/bash

# Return true if the old siteconf exists
does_siteconf_need_migration() {
  oldscdev=/run/live/medium/siteconf
  [ -e "$oldscdev" ]
}

# This is only for testing and validation of the code.
check_redo_siteconf_migration() {
  r=/run/live/medium/redo-siteconf
  src=/run/live/medium/oldsiteconf
  dst=/run/live/medium/siteconf
  if [ -e "$r" ]; then
    mount -o remount,rw /run/live/medium
    if [ -e "$src" ]; then
      rm -f $dst
      mv $src $dst
    fi
    RECOVERY_PARTITION=$(find_recovery_partition)
    if [ "$RECOVERY_PARTITION" ]; then
      wipefs --all --force $RECOVERY_PARTITION
    fi
    rm -f $r
    mount -o remount,ro /run/live/medium
    sync
    echo "Rebooting again"
    sleep 1
    /sbin/reboot -f
  fi
}

migrate_siteconf() {
  create_missing_recovery
  mount_siteconf
  mount_old_siteconf
  copy_old_siteconf_to_new
  unmount_siteconf
  unmount_recovery_partition
  umount /oldpersist
  mv /run/live/medium/siteconf /run/live/medium/oldsiteconf
  sync
  echo "Rebooting again"
  sleep 1
  /sbin/reboot -f
}

copy_old_siteconf_to_new() {
  echo -n "** Copying old recovery data..."
  rsync --exclude 'root/' -a /oldpersist/ /persist/
}

cleanup_siteconf_migration() {
  umount -f /oldpersist
  unmount_siteconf
}

mount_old_siteconf() {
  mkdir /oldpersist
  mount -o remount,rw /run/live/medium
  mount /run/live/medium/siteconf /oldpersist
}

create_missing_recovery() {
  RECOVERY_PARTITION=$(find_recovery_partition)
  if [ "$RECOVERY_PARTITION" ]; then
    # Not missing
    return
  fi
  for d in /dev/mmcblk?p3 /dev/?da3; do
    if [ -b $d ]; then
      CURRENTFS=$(lsblk -n -f $d | head -1 | awk '{ print $2 }')
      if [ ! "$CURRENTFS" ]; then
        # Awesome. We can just create it, there's nothing there.
        echo "** Creating Recovery Partition on $d"
        mkdosfs -F 32 -s 1 -n recovery $d
        RECOVERY_PARTITION=$d
        # This is needed so that /dev/disk/by-id and the rest are updated
        partprobe $d
        return
      fi
    fi
  done
}
