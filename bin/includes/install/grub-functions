#!/bin/bash

declare -a allvers

install_grub() {
  if [ -e /sys/firmware/efi ]; then
    install_grub_efi
  else
    # $1 is destdevice from dialog/askinstall.sh
    install_grub_bios $1
  fi
}

install_grub_bios() {
  local destdevice
  destdevice=/dev/$1
  GRUBNAME=$(get_grub_name | tr -d ' ')
  cmd="grub-install --no-floppy --recheck --target=i386-pc --force-extra-removable --root-directory=${WR_CONF} --bootloader-id='${GRUBNAME}' $destdevice"
  echo -n "   Installing BIOS Grub to $destdevice:  "
  progress_indicator start
  OUT=$($cmd 2>&1)
  status=$?
  if [ "$status" -ne 0 ]; then
    progress_indicator stop
    echo -e "\n** Failure Running grub-install **"
    echo "  Ran: $cmd"
    echo "  Result: $OUT"
    sleep 60
    exit 1
  fi
  progress_indicator stop
  echo " Done"
  update_grub_files
  generate_grub_cfg "$WR_CONF/boot/grub"
}

# This is here if needed to REALLY REALLY make things bootable.
# It is currently not used.
make_bootable() {
  local device hybridmbr
  device=/dev/$1
  if [ ! -b $device ]; then
    echo -e "\n\n*** Error - $device is not a block device, can not make bootable ***\n\n"
    sleep 30
    return
  fi
  # Ask fdisk to print the hybrid MBR
  hybridmbr=$(echo -e 'M\np\n' | fdisk $device 2>/dev/null | egrep '\s+\*\s+1')
  # If it's empty it is NOT bootable
  if [ ! "$hybridmbr" ]; then
    echo " *** HybridMBR not bootable on $device, activating"
    echo -e 'M\na\nw\n' | fdisk $device >/dev/null
  fi
}

install_grub_efi() {
  mount_efi_partition
  GRUBNAME=$(get_grub_name)
  cmd="grub-install --no-floppy --recheck --target=x86_64-efi --force-extra-removable --root-directory=${WR_CONF} --efi-directory=${EFI_CONF} --bootloader-id=${GRUBNAME} --no-uefi-secure-boot"
  echo -n "   Installing Grub to $EFI_PARTITION:  "
  progress_indicator start
  OUT=$($cmd 2>&1)
  status=$?
  if [ "$status" -ne 0 ]; then
    progress_indicator stop
    echo -e "\n** Failure Running grub-install **"
    echo "  Ran: $cmd"
    echo "  Result: $OUT"
    exit 1
  fi
  update_grub_files
  generate_grub_cfg "$WR_CONF/boot/grub"
  progress_indicator stop
  echo " Done"
  unmount_efi_partition
  if [ "$UNMOUNTISO" ]; then
    umount $ISO_MOUNT
  fi
  # Whatever's calling this should update siteconf after this
}

update_grub_files() {
  return
  rsync -a ${SRC_ROOT}/boot/grub/*cfg ${WR_CONF}/boot/grub
  #rsync -a ${SRC_ROOT}/boot/grub/*txt ${WR_CONF}/boot/grub
  #rsync -a ${SRC_ROOT}/boot/grub/*png ${WR_CONF}/boot/grub
  rsync -a ${SRC_ROOT}/boot/grub/*pf2 ${WR_CONF}/boot/grub

  # theme.txt may or may not have a path to /isolinux in the image
  sed -i 's_/isolinux/__' ${WR_CONF}/boot/grub/theme.txt

  # If there's an isolinux/splash.png, use that.
  if [ -e ${SRC_ROOT}/isolinux/splash.png ]; then
    rm -f ${WR_CONF}/boot/grub/splash.png
    cp ${SRC_ROOT}/isolinux/splash.png ${WR_CONF}/boot/grub/splash.png
  fi
}

get_valid_boots() {
  DEFAULT=""
  allvers=()
  for v in $(find ${WR_CONF}/boot -maxdepth 2 -name '*.squashfs' -printf "%T@ %p\n" | sort -nr | cut -d\  -f2); do
    dir=$(dirname $v)
    thisvers=$(basename $dir)
    if [ -e $dir/default-override -a "$DEFAULT" == "" ]; then
      DEFAULT=${#allvers[@]}
    fi
    allvers+=($thisvers)
  done
}

get_grub_name() {
  if [ -e /distro/grubname ]; then
    cat /distro/grubname
  else
    if [ ! -e /distro/shortname ]; then
      echo PhoneBocxErr
    else
      cat /distro/shortname
    fi
  fi
}

install_grub_theme() {
  DESTDIR="$1/theme"
  mkdir -p $DESTDIR
  # If there is a THEMEDIR set by something, use that too, but AFTER
  # core, so it can clobber anything it wants
  tdirs=${packagespresent["core"]}
  if [ "$THEMEDIR" ]; then
    tdirs="$tdirs $THEMEDIR"
  fi
  for d in $tdirs; do
    for gfile in $d/meta/grub/*; do
      [ ! -e $gfile ] && continue
      cp $gfile $DESTDIR/$(basename $gfile)
    done
  done
  # If this is NOT a UEFI machine, see if any theme files are being
  # overridden
  if [ ! -e /sys/firmware/efi ]; then
    # If there is a file starting with bios-*, remove bios- and
    # clobber the existing file (if any). This lets you share
    # all your grub themes, only updating things that are different
    # between UEFI grub and BIOS grub
    for d in $tdirs; do
      for bfile in $d/meta/grub/bios-*; do
        [ ! -e $bfile ] && continue
        DESTFILE=$DESTDIR/$(basename $bfile | sed 's/bios-//')
        cp $bfile $DESTFILE
      done
    done
  fi
}

check_grub_options() {
  # Note that 'boot/%s' is a variable used in generate_grub_cfg. It needs to be there. It is correct.
  # KNOWN ISSUE: vga=790 is complained about by grub. This should not be needed
  #VGAMODE="vga=790"
  VGAMODE=""
  default_grub_opts="$VGAMODE boot=live rootdelay=5 noautologin net.ifnames=0 biosdevname=0 live-media-path=boot/%s nomodeset"
  default_reset_script=/usr/local/bin/factory_reset
  default_timeout=5
  [ ! "$GRUB_OPTIONS" ] && GRUB_OPTIONS=$default_grub_opts
  [ ! "$reset_script" ] && reset_script=$default_reset_script
  [ ! "$GRUB_TIMEOUT" ] && GRUB_TIMEOUT=$default_timeout
}

generate_grub_cfg() {
  check_grub_options
  install_grub_theme $1
  OUTFILE="$1/grub.cfg"
  DEBUG_OPTIONS="$GRUB_OPTIONS debug systemd.log_level=info"
  GRUBNAME=$(get_grub_name)
  get_valid_boots
  if [ "$DEFAULT" == "" ]; then
    DEFAULT=0
  fi

  if [ -e /sys/firmware/efi ]; then
    # This is a UEFI machine, use the default grub-header
    HEADERFILE=$INCDIR/grub-header.inc
  else
    # It's bios. Use bios-grub-header if it exists.
    HEADERFILE=$INCDIR/bios-grub-header.inc
    if [ ! -e $HEADERFILE ]; then
      HEADERFILE=$INCDIR/grub-header.inc
    fi
  fi

  sed -e "s/__DEFAULT__/$DEFAULT/" -e "s/__TIMEOUT__/$GRUB_TIMEOUT/" $HEADERFILE >$OUTFILE

  madefr=""

  for v in "${allvers[@]}"; do
    echo "menuentry \"$GRUBNAME $v\" {" >>$OUTFILE
    echo "  linux /boot/$v/vmlinuz $(printf "$GRUB_OPTIONS" $v) quiet" >>$OUTFILE
    echo "  initrd /boot/$v/initrd.img" >>$OUTFILE
    echo "}" >>$OUTFILE
    echo "menuentry \"$GRUBNAME $v (Debug)\" {" >>$OUTFILE
    echo "  linux /boot/$v/vmlinuz $(printf "$DEBUG_OPTIONS" $v) debug" >>$OUTFILE
    echo "  initrd /boot/$v/initrd.img" >>$OUTFILE
    echo "}" >>$OUTFILE
    if [ ! "$madefr" ]; then
      echo "menuentry \"Factory Reset\" {" >>$OUTFILE
      echo "  linux /boot/$v/vmlinuz $(printf "$GRUB_OPTIONS" $v) nopersistence init=$reset_script" >>$OUTFILE
      echo "  initrd /boot/$v/initrd.img" >>$OUTFILE
      echo "}" >>$OUTFILE
      madefr="yes"
    fi
  done

  if [ -e ${WR_CONF}/boot/memtest ]; then
    echo "menuentry \"Memtest\" {" >>$OUTFILE
    echo "  linux16 /boot/memtest" >>$OUTFILE
    echo "}" >>$OUTFILE
  fi
}

del_from_grub() {
  build=$1
  # Make sure there's more than 1 build left
  get_valid_boots
  if [ "${#allvers[@]}" -le 1 ]; then
    echo "Only ${#allvers[@]} valid boot entries. Can not delete"
    exit
  fi
  bdir=${WR_CONF}/boot/${build}
  if [ ! -d "$bdir" ]; then
    echo "$bdir is not a dir? How can I delete that?"
    exit
  fi
  if [ ! -e "$bdir/$build.squashfs" ]; then
    echo "$bdir/$build.squashfs doesn't exist. Can not delete this"
    exit
  fi

  rm -rf $bdir
}
