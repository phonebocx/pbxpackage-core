#!/bin/bash

create_partitions() {

  drive=$1
  # Minimum of 16gb.
  min=16000

  # Make sure there is enough space on drive
  size=$(get_drive_size "$drive")
  if [ "$size" -lt "$min" ]; then
    echo "Error: $drive is only ${size}MB. Minium is ${min}MB. Can not install."
    exit 1
  fi

  # Figure out what the devices should be
  if [[ "$drive" =~ (cciss|mmc|nvme) ]]; then
    DEV="/dev/${drive}"
    P=p
  else
    DEV="/dev/$drive"
    P=""
  fi

  EFI_PARTITION="${DEV}${P}2"
  RECOVERY_PARTITION="${DEV}${P}3"
  CONF_PARTITION="${DEV}${P}4"
  SPOOL_PARTITION="${DEV}${P}5"

  # part1 = BIOS BOOT (backwards compatibility, always the same)
  # part2 = EFI, always 256g, even on a BIOS machine

  # If this is a 'small' machine, less than 40g of storage, use
  # 2G for recovery/persistent storage and 10g for config (eg, boot
  # images and system-wide persistant storage). Otherwise, 4G and 20G.
  if [ "$size" -lt 40000 ]; then
    recoverysize="+2G"
    confsize="+10G"
  else
    recoverysize="+4G"
    confsize="+20G"
  fi
  # part5 = SPOOL, using whatever is left over.

  # If this isn't an EFI machine, don't call it an EFI volume
  if [ ! -e /sys/firmware/efi ]; then
    EVOLNAME="Spare Volume"
  else
    EVOLNAME="EFI Volume"
  fi

  # Legacy Boot, 2014 sector size is hard-coded in create_if_needed,
  # and is required for EFI booting, and stores the BIOS GRUB loader
  # on BIOS machines.
  create_if_needed "Legacy Boot" $DEV 1 legacy
  create_if_needed "$EVOLNAME" $DEV 2 efi "+256M"
  # Unfortunately, the previous installer only created this
  # as a 1G partition. This makes migration painful.
  create_if_needed "Recovery" $DEV 3 recovery $recoverysize
  # This contains /boot
  create_if_needed "Config" $DEV 4 conf $confsize
  create_if_needed "Spool" $DEV 5 $SPOOLLABEL "0"

  partprobe $DEV
  udevadm trigger
  udevadm settle

  # Double check it was created
  if [ ! -b "$CONF_PARTITION" ]; then
    echo "$CONF_PARTITION does not exist. This is a severe problem"
    exit 1
  fi

  [ ! "$(blkid $EFI_PARTITION | grep TYPE=)" ] && make_efi_filesystem $EFI_PARTITION
  [ ! "$(blkid $RECOVERY_PARTITION | grep TYPE=)" ] && make_recovery_filesystem $RECOVERY_PARTITION
  [ ! "$(blkid $CONF_PARTITION | grep TYPE=)" ] && make_filesystem "$CONF_PARTITION" ext4 $CONFLABEL "Config"
  # Spool is always encrypted, and is managed/mounted by the boot scripts

  # Make sure the partitions now exist
  if [ ! "$(find_conf_partition)" ]; then
    echo "Error finding conf partition"
    exit 1
  fi
}
